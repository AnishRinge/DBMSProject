USE travel_booking;

-- Enhanced tables for travel booking system

-- 8) Review Table - Customer reviews and ratings for hotels
CREATE TABLE Review (
  review_id BIGINT PRIMARY KEY AUTO_INCREMENT,
  booking_id BIGINT NOT NULL,
  hotel_id INT NOT NULL,
  user_id INT NOT NULL,
  rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),
  review_text TEXT,
  review_title VARCHAR(200),
  is_verified BOOLEAN DEFAULT FALSE, -- Only users who actually stayed can review
  helpful_count INT DEFAULT 0, -- Number of users who found this review helpful
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (booking_id) REFERENCES Booking(booking_id),
  FOREIGN KEY (hotel_id) REFERENCES Hotel(hotel_id),
  FOREIGN KEY (user_id) REFERENCES `User`(user_id),
  -- Ensure one review per booking
  UNIQUE(booking_id),
  -- Index for performance
  INDEX idx_review_hotel (hotel_id),
  INDEX idx_review_rating (rating),
  INDEX idx_review_created (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 9) SeasonalPricing Table - Dynamic pricing based on seasons/events
CREATE TABLE SeasonalPricing (
  pricing_id INT PRIMARY KEY AUTO_INCREMENT,
  room_type_id INT NOT NULL,
  season_name VARCHAR(50) NOT NULL, -- e.g., 'Summer', 'Winter', 'Festival Season', 'Weekend'
  description TEXT, -- Description of the season/event
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  price_multiplier DECIMAL(4,2) NOT NULL DEFAULT 1.00, -- 1.5 = 50% increase, 0.8 = 20% discount
  is_active BOOLEAN DEFAULT TRUE,
  priority INT DEFAULT 1, -- Higher priority pricing takes precedence if dates overlap
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (room_type_id) REFERENCES RoomType(room_type_id),
  -- Ensure valid date range
  CHECK (start_date <= end_date),
  -- Ensure reasonable multiplier range
  CHECK (price_multiplier > 0 AND price_multiplier <= 5.0),
  -- Indexes for performance
  INDEX idx_seasonal_room_type (room_type_id),
  INDEX idx_seasonal_dates (start_date, end_date),
  INDEX idx_seasonal_active (is_active, priority)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 10) ReviewHelpful Table - Track which users found reviews helpful
CREATE TABLE ReviewHelpful (
  review_id BIGINT NOT NULL,
  user_id INT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (review_id, user_id),
  FOREIGN KEY (review_id) REFERENCES Review(review_id) ON DELETE CASCADE,
  FOREIGN KEY (user_id) REFERENCES `User`(user_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Helper function to calculate seasonal price
DELIMITER $$
CREATE FUNCTION GetSeasonalPrice(
    p_room_type_id INT,
    p_date DATE
) RETURNS DECIMAL(10,2)
READS SQL DATA
DETERMINISTIC
BEGIN
    DECLARE base_price DECIMAL(10,2);
    DECLARE multiplier DECIMAL(4,2) DEFAULT 1.00;
    
    -- Get base price
    SELECT rt.base_price INTO base_price
    FROM RoomType rt
    WHERE rt.room_type_id = p_room_type_id;
    
    -- Get highest priority active seasonal pricing for the date
    SELECT sp.price_multiplier INTO multiplier
    FROM SeasonalPricing sp
    WHERE sp.room_type_id = p_room_type_id
      AND sp.is_active = TRUE
      AND p_date BETWEEN sp.start_date AND sp.end_date
    ORDER BY sp.priority DESC, sp.pricing_id DESC
    LIMIT 1;
    
    RETURN ROUND(base_price * multiplier, 2);
END$$
DELIMITER ;

-- View for hotel ratings summary
CREATE VIEW HotelRatingSummary AS
SELECT 
    h.hotel_id,
    h.name as hotel_name,
    COUNT(r.review_id) as total_reviews,
    ROUND(AVG(r.rating), 2) as average_rating,
    COUNT(CASE WHEN r.rating = 5 THEN 1 END) as five_star_count,
    COUNT(CASE WHEN r.rating = 4 THEN 1 END) as four_star_count,
    COUNT(CASE WHEN r.rating = 3 THEN 1 END) as three_star_count,
    COUNT(CASE WHEN r.rating = 2 THEN 1 END) as two_star_count,
    COUNT(CASE WHEN r.rating = 1 THEN 1 END) as one_star_count,
    MAX(r.created_at) as latest_review_date
FROM Hotel h
LEFT JOIN Review r ON h.hotel_id = r.hotel_id
GROUP BY h.hotel_id, h.name;

-- View for room pricing with seasonal adjustments
CREATE VIEW RoomPricingView AS
SELECT 
    rt.room_type_id,
    rt.name as room_type_name,
    h.name as hotel_name,
    rt.base_price,
    CURRENT_DATE as price_date,
    GetSeasonalPrice(rt.room_type_id, CURRENT_DATE) as current_price,
    ROUND(((GetSeasonalPrice(rt.room_type_id, CURRENT_DATE) - rt.base_price) / rt.base_price) * 100, 2) as price_change_percent
FROM RoomType rt
JOIN Hotel h ON rt.hotel_id = h.hotel_id;