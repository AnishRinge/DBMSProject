USE travel_booking;

-- Cities (using INSERT IGNORE to avoid duplicates)
INSERT IGNORE INTO City (name, country) VALUES
('Mumbai', 'India'),
('Delhi', 'India'),
('Goa', 'India');

-- Users (using INSERT IGNORE to avoid duplicates)
INSERT IGNORE INTO `User` (full_name, email, phone, role) VALUES
('Anish Ringe', 'anish@example.com', '+91-9000000001', 'CUSTOMER'),
('Admin User', 'admin@example.com', '+91-9000000002', 'ADMIN');

-- Hotels (using INSERT IGNORE to avoid duplicates)
INSERT IGNORE INTO Hotel (city_id, name, address, rating) VALUES
((SELECT city_id FROM City WHERE name='Mumbai' AND country='India'),
 'Sea View Residency', 'Marine Drive, Mumbai', 4.3),
((SELECT city_id FROM City WHERE name='Mumbai' AND country='India'),
 'Skyline Suites', 'Bandra West, Mumbai', 4.6),
((SELECT city_id FROM City WHERE name='Goa' AND country='India'),
 'Palm Beach Resort', 'Calangute, Goa', 4.4);

-- Room Types (using INSERT IGNORE to avoid duplicates)
INSERT IGNORE INTO RoomType (hotel_id, name, base_price, max_guests) VALUES
((SELECT hotel_id FROM Hotel WHERE name='Sea View Residency'), 'Deluxe',    4500.00, 2),
((SELECT hotel_id FROM Hotel WHERE name='Sea View Residency'), 'Suite',     7200.00, 3),
((SELECT hotel_id FROM Hotel WHERE name='Skyline Suites'),    'Executive',  5800.00, 2),
((SELECT hotel_id FROM Hotel WHERE name='Palm Beach Resort'), 'Cottage',    5000.00, 3);

-- Procedure to fill inventory for N days from today with default qty
DROP PROCEDURE IF EXISTS fill_inventory_next_days;

DELIMITER $$
CREATE PROCEDURE fill_inventory_next_days(IN p_days INT, IN p_default_qty INT)
BEGIN
  DECLARE done INT DEFAULT 0;
  DECLARE v_room_type_id INT;
  DECLARE v_start DATE;
  DECLARE v_i INT;

  DECLARE cur CURSOR FOR SELECT room_type_id FROM RoomType;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

  SET v_start = CURRENT_DATE;

  OPEN cur;
  read_loop: LOOP
    FETCH cur INTO v_room_type_id;
    IF done = 1 THEN
      LEAVE read_loop;
    END IF;

    SET v_i = 0;
    day_loop: LOOP
      IF v_i >= p_days THEN
        LEAVE day_loop;
      END IF;
      INSERT IGNORE INTO RoomInventory (room_type_id, stay_date, qty)
      VALUES (v_room_type_id, DATE_ADD(v_start, INTERVAL v_i DAY), p_default_qty);
      SET v_i = v_i + 1;
    END LOOP;
  END LOOP;
  CLOSE cur;
END$$
DELIMITER ;

-- Fill the next 14 days with 5 rooms available per room type
CALL fill_inventory_next_days(14, 5);

-- Sample Seasonal Pricing (using INSERT IGNORE to avoid duplicates)
INSERT IGNORE INTO SeasonalPricing (room_type_id, season_name, description, start_date, end_date, price_multiplier, is_active, priority) VALUES
-- Peak Season (December-January) - Higher prices
(1, 'Winter Peak', 'Peak tourist season with pleasant weather', '2025-12-15', '2026-01-15', 1.50, TRUE, 3),
(2, 'Winter Peak', 'Peak tourist season with pleasant weather', '2025-12-15', '2026-01-15', 1.50, TRUE, 3),
(3, 'Winter Peak', 'Peak tourist season with pleasant weather', '2025-12-15', '2026-01-15', 1.50, TRUE, 3),
(4, 'Winter Peak', 'Peak tourist season with pleasant weather', '2025-12-15', '2026-01-15', 1.50, TRUE, 3),

-- Festival Season (October-November) - Premium pricing
(1, 'Festival Season', 'Diwali and Dussehra festival period', '2025-10-01', '2025-11-30', 1.30, TRUE, 2),
(2, 'Festival Season', 'Diwali and Dussehra festival period', '2025-10-01', '2025-11-30', 1.30, TRUE, 2),
(3, 'Festival Season', 'Diwali and Dussehra festival period', '2025-10-01', '2025-11-30', 1.30, TRUE, 2),
(4, 'Festival Season', 'Diwali and Dussehra festival period', '2025-10-01', '2025-11-30', 1.30, TRUE, 2),

-- Monsoon Discount (June-September) - Lower prices
(1, 'Monsoon Special', 'Monsoon season with attractive discounts', '2025-06-01', '2025-09-30', 0.75, TRUE, 1),
(2, 'Monsoon Special', 'Monsoon season with attractive discounts', '2025-06-01', '2025-09-30', 0.75, TRUE, 1),
(3, 'Monsoon Special', 'Monsoon season with attractive discounts', '2025-06-01', '2025-09-30', 0.75, TRUE, 1),
(4, 'Monsoon Special', 'Monsoon season with attractive discounts', '2025-06-01', '2025-09-30', 0.75, TRUE, 1),

-- Weekend Premium (applies to all weekends)
(1, 'Weekend Premium', 'Weekend premium pricing', '2025-09-27', '2025-09-28', 1.20, TRUE, 4),
(2, 'Weekend Premium', 'Weekend premium pricing', '2025-09-27', '2025-09-28', 1.20, TRUE, 4),
(3, 'Weekend Premium', 'Weekend premium pricing', '2025-09-27', '2025-09-28', 1.20, TRUE, 4),
(4, 'Weekend Premium', 'Weekend premium pricing', '2025-09-27', '2025-09-28', 1.20, TRUE, 4);
